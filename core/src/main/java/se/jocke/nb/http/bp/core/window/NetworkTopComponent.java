package se.jocke.nb.http.bp.core.window;

import java.awt.EventQueue;
import java.util.Set;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import se.jocke.nb.http.bp.core.HttpExchange;
import se.jocke.nb.http.bp.core.preferences.ProxyPreferences;
import se.jocke.nb.http.bp.core.service.UndertowService;
import se.jocke.nb.http.bp.core.table.HttpExchangeTableModel;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//se.jocke.nb.http.bp.core.window//Network//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "NetworkTopComponent",
        iconBase = "se/jocke/nb/http/bp/core/window/Network-Domain-icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "se.jocke.nb.http.bp.core.window.NetworkTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NetworkAction",
        preferredID = "NetworkTopComponent"
)
@Messages({
    "CTL_NetworkAction=Network",
    "CTL_NetworkTopComponent=Exchanges",
    "HINT_NetworkTopComponent=Exchanges"
})
public final class NetworkTopComponent extends TopComponent {

    private final UndertowService service;

    private final HttpExchangeTableModel allEventsModel;

    private final HttpExchangeTableModel filteredEventsModel;

    private final Set<HttpExchangeTableModel> models;

    private final InstanceContent content;

    public NetworkTopComponent(InstanceContent content) {
        super(new AbstractLookup(content));
        this.content = content;
        initComponents();
        setName(Bundle.CTL_NetworkTopComponent());
        setToolTipText(Bundle.HINT_NetworkTopComponent());
        this.service = new UndertowService(ProxyPreferences.getPort(), ProxyPreferences.getBindAddress(), this::onEvent);
        this.allEventsModel = (HttpExchangeTableModel) allHttpEventsTable.getModel();
        this.filteredEventsModel = (HttpExchangeTableModel) filteredHttpEventsTable.getModel();
        this.models = Set.of(allEventsModel, filteredEventsModel);

        allHttpEventsTable.getSelectionModel().addListSelectionListener(e -> {
            if (allHttpEventsTable.getSelectedRow() >= 0 && !e.getValueIsAdjusting()) {
                filteredHttpEventsTable.clearSelection();
                onRowChange(allEventsModel.getExchangeAt(allHttpEventsTable.getSelectedRow()));
            }
        });

        filteredHttpEventsTable.getSelectionModel().addListSelectionListener(e -> {

            if (filteredHttpEventsTable.getSelectedRow() >= 0 && !e.getValueIsAdjusting()) {
                allHttpEventsTable.clearSelection();
                onRowChange(filteredEventsModel.getExchangeAt(allHttpEventsTable.getSelectedRow()));
            }
        });
    }

    public NetworkTopComponent() {
        this(new InstanceContent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        allHttpEventsTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        filterTextField = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(20, 32767));
        clearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filteredHttpEventsTable = new javax.swing.JTable();

        jSplitPane1.setDividerSize(20);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(375, 558));

        allHttpEventsTable.setModel(new HttpExchangeTableModel(evt -> true));
        jScrollPane3.setViewportView(allHttpEventsTable);

        jSplitPane1.setTopComponent(jScrollPane3);

        jToolBar1.setRollover(true);

        filterTextField.setText(org.openide.util.NbBundle.getMessage(NetworkTopComponent.class, "NetworkTopComponent.filterTextField.text")); // NOI18N
        filterTextField.setPreferredSize(new java.awt.Dimension(400, 35));
        jToolBar1.add(filterTextField);
        filterTextField.getDocument().addDocumentListener(new DocumentListener(){
            public void changedUpdate(DocumentEvent e){onFilterChanged();}
            public void removeUpdate(DocumentEvent e){onFilterChanged();}
            public void insertUpdate(DocumentEvent e){onFilterChanged();}
        });
        jToolBar1.add(filler1);

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/jocke/nb/http/bp/core/window/clear.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(NetworkTopComponent.class, "NetworkTopComponent.clearButton.text")); // NOI18N
        clearButton.setFocusable(false);
        clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton.setPreferredSize(new java.awt.Dimension(40, 40));
        clearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(clearButton);

        filteredHttpEventsTable.setModel(new HttpExchangeTableModel(evt -> false));
        filteredHttpEventsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filteredHttpEventsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(filteredHttpEventsTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        models.forEach(HttpExchangeTableModel::onClearEvents);
        onRowChange(HttpExchange.EMPTY);
    }//GEN-LAST:event_clearButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allHttpEventsTable;
    private javax.swing.JButton clearButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JTable filteredHttpEventsTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        models.forEach(HttpExchangeTableModel::onClearEvents);
        service.start();
    }

    private void onEvent(HttpExchange exchange) {
        EventQueue.invokeLater(() -> {
            models.forEach(m -> m.onEvent(exchange));
            getLookup().lookupAll(HttpExchange.class)
                    .stream()
                    .filter(exchangeInLookup -> exchangeInLookup.equals(exchange))
                    .findFirst()
                    .ifPresent(exchangeInLookup -> onRowChange(exchange));
        });
    }

    private void onFilterChanged() {
        String text = filterTextField.getText();
        if (text == null || text.isBlank()) {
            filteredEventsModel.onClearFilter();
        } else {
            filteredEventsModel.onFilterChange(exchange -> exchange.getRequestURI().contains(text));
        }
    }

    @Override
    public void componentClosed() {
        service.stop();
    }

    public void onRowChange(HttpExchange exchange) {
        getLookup().lookupAll(HttpExchange.class).forEach(content::remove);
        content.add(exchange);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
