package se.jocke.nb.http.bp.core.window;

import java.util.Collection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import se.jocke.nb.http.bp.core.HttpExchange;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//se.jocke.nb.http.bp.core.window//ExchangeContent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ExchangeContentTopComponent",
        iconBase = "se/jocke/nb/http/bp/core/window/Network-Domain-icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "bottomSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "se.jocke.nb.http.bp.core.window.ExchangeContentTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExchangeContentAction",
        preferredID = "ExchangeContentTopComponent"
)
@Messages({
    "CTL_ExchangeContentAction=Exchange Content",
    "CTL_ExchangeContentTopComponent=Exchange Content",
    "HINT_ExchangeContentTopComponent=Exchange Content"
})
public final class ExchangeContentTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<HttpExchange> result;

    public ExchangeContentTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExchangeContentTopComponent());
        setToolTipText(Bundle.HINT_ExchangeContentTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        requestEditorPane = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        responseEditorPane = new javax.swing.JEditorPane();

        requestEditorPane.setEditable(false);
        jScrollPane3.setViewportView(requestEditorPane);

        responseEditorPane.setEditable(false);
        jScrollPane4.setViewportView(responseEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JEditorPane requestEditorPane;
    private javax.swing.JEditorPane responseEditorPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        Lookup.Template<HttpExchange> tpl = new Lookup.Template<>(HttpExchange.class);
        result = Utilities.actionsGlobalContext().lookup(tpl);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        if (result != null) {
            result.removeLookupListener(this);
        }
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result<HttpExchange> r = (Lookup.Result) le.getSource();
        Collection<? extends HttpExchange> allInstances = r.allInstances();

        if (!allInstances.isEmpty()) {
            HttpExchange exchange = allInstances.iterator().next();

            String responseBody = exchange.getResponseBody();

            if (responseBody != null) {
                responseEditorPane.setText(responseBody);
            } else {
                responseEditorPane.setText("");
            }

            String requestBody = exchange.getRequestBody();

            if (requestBody != null) {
                requestEditorPane.setText(requestBody);
            } else {
                requestEditorPane.setText("");
            }
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
